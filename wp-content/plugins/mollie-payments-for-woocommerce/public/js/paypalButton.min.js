/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/maybeShowApplePayButton.js":
/*!*************************************************!*\
  !*** ./resources/js/maybeShowApplePayButton.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   maybeShowButton: () => (/* binding */ maybeShowButton)
/* harmony export */ });
var maybeShowButton = function maybeShowButton() {
  var _window = window,
    ApplePaySession = _window.ApplePaySession;
  var applePayMethodElement = document.querySelector('#mollie-applepayDirect-button');
  var canShowButton = applePayMethodElement && ApplePaySession && ApplePaySession.canMakePayments();
  if (!canShowButton) {
    return false;
  }
  var button = document.createElement('button');
  button.setAttribute('id', 'mollie_applepay_button');
  button.classList.add('apple-pay-button');
  button.classList.add('apple-pay-button-black');
  applePayMethodElement.appendChild(button);
  return true;
};

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be isolated against other modules in the chunk.
(() => {
/*!**************************************!*\
  !*** ./resources/js/paypalButton.js ***!
  \**************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _maybeShowApplePayButton__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./maybeShowApplePayButton */ "./resources/js/maybeShowApplePayButton.js");

(function (_ref) {
  var _ = _ref._,
    molliepaypalbutton = _ref.molliepaypalbutton,
    jQuery = _ref.jQuery;
  if (_.isEmpty(molliepaypalbutton)) {
    return;
  }
  var _molliepaypalbutton$p = molliepaypalbutton.product,
    id = _molliepaypalbutton$p.id,
    _molliepaypalbutton$p2 = _molliepaypalbutton$p.needShipping,
    needShipping = _molliepaypalbutton$p2 === void 0 ? true : _molliepaypalbutton$p2,
    _molliepaypalbutton$p3 = _molliepaypalbutton$p.isVariation,
    isVariation = _molliepaypalbutton$p3 === void 0 ? false : _molliepaypalbutton$p3,
    price = _molliepaypalbutton$p.price,
    minFee = _molliepaypalbutton$p.minFee,
    stock = _molliepaypalbutton$p.stock,
    ajaxUrl = molliepaypalbutton.ajaxUrl;
  if (!id || !price || !ajaxUrl) {
    return;
  }
  function getKeyByValue(object, value) {
    return Object.keys(object).find(function (key) {
      return object[key] === value;
    });
  }
  var payPalButton = document.querySelector('#mollie-PayPal-button');
  var buttonParentNode = payPalButton.parentNode;
  var positionKey = false;
  if (buttonParentNode.hasChildNodes()) {
    positionKey = getKeyByValue(buttonParentNode.children, payPalButton);
  }
  var maybeShowButton = function maybeShowButton(underRange) {
    if (underRange) {
      hideButton();
    } else {
      showButton();
    }
  };
  var checkPriceRange = function checkPriceRange(productQuantity) {
    var updatedPrice = productQuantity * price;
    jQuery.ajax({
      url: ajaxUrl,
      method: 'POST',
      data: {
        action: 'mollie_paypal_update_amount',
        productId: productId,
        productQuantity: productQuantity,
        nonce: nonce
      },
      success: function success(response) {
        updatedPrice = parseFloat(response.data);
        var underRange = parseFloat(minFee) > updatedPrice;
        maybeShowButton(underRange);
      },
      error: function error(response) {
        console.warn(response);
      }
    });
  };
  var hideButton = function hideButton() {
    if (buttonParentNode !== null) {
      buttonParentNode.removeChild(payPalButton);
    }
  };
  var showButton = function showButton() {
    //if the node has a list of children, we need to insert the button at the correct position
    var sibling = buttonParentNode.children[positionKey];
    buttonParentNode.insertBefore(payPalButton, sibling);
  };
  var outOfStock = stock === 'outofstock';
  if (outOfStock) {
    hideButton();
    return;
  }
  var nonce = payPalButton.children[0].value;
  var productId = id;
  var productQuantity = 1;
  var redirectionUrl = '';
  document.querySelector('input.qty').addEventListener('change', function (event) {
    productQuantity = event.currentTarget.value;
    checkPriceRange(productQuantity);
  });
  checkPriceRange(productQuantity);
  var fadeButton = function fadeButton() {
    payPalButton.disabled = true;
    payPalButton.classList.add("buttonDisabled");
  };
  if (isVariation) {
    jQuery('.single_variation_wrap').on('show_variation', function (event, variation) {
      productId = '';
      fadeButton();
      // Fired when the user selects all the required dropdowns / attributes
      // and a final variation is selected / shown
      if (variation.is_virtual && variation.is_in_stock && variation.variation_id) {
        productId = variation.variation_id;
        payPalButton.disabled = false;
        payPalButton.classList.remove("buttonDisabled");
      }
    });
    jQuery('.reset_variations').on('click.wc-variation-form', function (event) {
      productId = '';
      fadeButton();
    });
    fadeButton();
  }
  if (payPalButton.parentNode == null) {
    return;
  }
  var preventSpam = false;
  payPalButton.addEventListener('click', function (evt) {
    evt.preventDefault();
    if (!(payPalButton.parentNode !== null) || payPalButton.disabled) {
      return;
    }
    payPalButton.disabled = true;
    payPalButton.classList.add("buttonDisabled");
    if (!preventSpam) {
      jQuery.ajax({
        url: ajaxUrl,
        method: 'POST',
        data: {
          action: 'mollie_paypal_create_order',
          productId: productId,
          productQuantity: productQuantity,
          needShipping: needShipping,
          'mollie-payments-for-woocommerce_issuer_paypal_button': 'paypal',
          nonce: nonce
        },
        success: function success(response) {
          var result = response.data;
          if (response.success === true) {
            redirectionUrl = result['redirect'];
            window.location.href = redirectionUrl;
          } else {
            console.log(response.data);
          }
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          payPalButton.disabled = false;
          payPalButton.classList.remove("buttonDisabled");
          console.warn(textStatus, errorThrown);
        }
      });
    }
    preventSpam = true;
    if (preventSpam) {
      setTimeout(function () {
        payPalButton.disabled = false;
        payPalButton.classList.remove("buttonDisabled");
        preventSpam = false;
      }, 3000);
    }
  });
})(window);
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,