/******/ (() => { // webpackBootstrap
/*!**************************************************!*\
  !*** ./resources/js/mollie-components-blocks.js ***!
  \**************************************************/
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var SELECTOR_TOKEN_ELEMENT = '.cardToken';
var SELECTOR_MOLLIE_COMPONENTS_CONTAINER = '.mollie-components';
var SELECTOR_FORM = 'form';
var SELECTOR_MOLLIE_GATEWAY_BLOCK_CONTAINER = '.wc-block-components-radio-control';
var SELECTOR_MOLLIE_NOTICE_CONTAINER = '#mollie-notice';
function returnFalse() {
  return false;
}
function returnTrue() {
  return true;
}

/* -------------------------------------------------------------------
   Containers
   ---------------------------------------------------------------- */
function gatewayContainer(container) {
  var blockContainer = container ? container.querySelector(SELECTOR_MOLLIE_GATEWAY_BLOCK_CONTAINER) : null;
  return blockContainer;
}
function containerForGateway(gateway, container) {
  return container ? container.querySelector(".payment_method_mollie_wc_gateway_".concat(gateway)) : null;
}
function noticeContainer(container) {
  return container ? container.querySelector(SELECTOR_MOLLIE_NOTICE_CONTAINER) : null;
}
function componentsContainerFromWithin(container) {
  return container ? container.querySelector(SELECTOR_MOLLIE_COMPONENTS_CONTAINER) : null;
}
function cleanContainer(container) {
  if (!container) {
    return;
  }
  container.innerText = '';
}

/* -------------------------------------------------------------------
   Notice
   ---------------------------------------------------------------- */
function renderNotice(_ref) {
  var content = _ref.content,
    type = _ref.type;
  return "\n      <div id=\"mollie-notice\" class=\"woocommerce-".concat(type, "\">\n        ").concat(content, "\n      </div>\n    ");
}
function printNotice(jQuery, noticeData) {
  var container = gatewayContainer(document);
  var formContainer = closestFormForElement(container).parentNode || null;
  var mollieNotice = noticeContainer(document);
  var renderedNotice = renderNotice(noticeData);
  mollieNotice && mollieNotice.remove();
  if (!formContainer) {
    alert(noticeData.content);
    return;
  }
  formContainer.insertAdjacentHTML('beforebegin', renderedNotice);
  scrollToNotice(jQuery);
}
function scrollToNotice(jQuery) {
  var scrollToElement = noticeContainer(document);
  if (!scrollToElement) {
    scrollToElement = gatewayContainer(document);
  }
  jQuery.scroll_to_notices(jQuery(scrollToElement));
}

/* -------------------------------------------------------------------
   Token
   ---------------------------------------------------------------- */
function createTokenFieldWithin(container) {
  container.insertAdjacentHTML('beforeend', '<input type="hidden" name="cardToken" class="cardToken" value="" />');
}
function tokenElementWithin(container) {
  return container.querySelector(SELECTOR_TOKEN_ELEMENT);
}
function retrievePaymentToken(_x) {
  return _retrievePaymentToken.apply(this, arguments);
}
function _retrievePaymentToken() {
  _retrievePaymentToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(mollie) {
    var _yield$mollie$createT, token, error;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return mollie.createToken(SELECTOR_TOKEN_ELEMENT);
        case 2:
          _yield$mollie$createT = _context.sent;
          token = _yield$mollie$createT.token;
          error = _yield$mollie$createT.error;
          if (!error) {
            _context.next = 7;
            break;
          }
          throw new Error(error.message || '');
        case 7:
          return _context.abrupt("return", token);
        case 8:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _retrievePaymentToken.apply(this, arguments);
}
function setTokenValueToField(token, tokenFieldElement) {
  if (!tokenFieldElement) {
    return;
  }
  tokenFieldElement.value = token;
  tokenFieldElement.setAttribute('value', token);
}

/* -------------------------------------------------------------------
   Form
   ---------------------------------------------------------------- */
function closestFormForElement(element) {
  return element ? element.closest(SELECTOR_FORM) : null;
}
function turnMollieComponentsSubmissionOff($form) {
  $form.off('checkout_place_order', returnFalse);
  $form.off('submit', submitForm);
}
function turnBlockListenerOff(target) {
  target.off('click', submitForm);
}
function isGatewaySelected(gateway) {
  var gatewayBlockInput = document.getElementById("radio-control-wc-payment-method-options-mollie_wc_gateway_creditcard");
  if (gatewayBlockInput) {
    return gatewayBlockInput.checked || false;
  }
}
function submitForm(_x2) {
  return _submitForm.apply(this, arguments);
}
/* -------------------------------------------------------------------
   Component
   ---------------------------------------------------------------- */
function _submitForm() {
  _submitForm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(evt) {
    var token, _evt$data, jQuery, mollie, gateway, gatewayContainer, messages, form, $form, $document, _error, _error$message, content, readyToSubmitBlock;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          token = '';
          _evt$data = evt.data, jQuery = _evt$data.jQuery, mollie = _evt$data.mollie, gateway = _evt$data.gateway, gatewayContainer = _evt$data.gatewayContainer, messages = _evt$data.messages;
          form = closestFormForElement(gatewayContainer);
          $form = jQuery(form);
          $document = jQuery(document.body);
          if (isGatewaySelected(gateway)) {
            _context2.next = 9;
            break;
          }
          // Let other gateway to submit the form
          turnMollieComponentsSubmissionOff($form);
          $form.submit();
          return _context2.abrupt("return");
        case 9:
          evt.preventDefault();
          evt.stopImmediatePropagation();
          _context2.prev = 11;
          _context2.next = 14;
          return retrievePaymentToken(mollie);
        case 14:
          token = _context2.sent;
          _context2.next = 24;
          break;
        case 17:
          _context2.prev = 17;
          _context2.t0 = _context2["catch"](11);
          content = (_error = _context2.t0, _error$message = _error.message, message = _error$message === void 0 ? messages.defaultErrorMessage : _error$message, _error);
          content && printNotice(jQuery, {
            content: content,
            type: 'error'
          });
          $form.removeClass('processing').unblock();
          $document.trigger('checkout_error');
          return _context2.abrupt("return");
        case 24:
          turnMollieComponentsSubmissionOff($form);
          token && setTokenValueToField(token, tokenElementWithin(gatewayContainer));
          if (!(evt.type === 'click')) {
            _context2.next = 31;
            break;
          }
          turnBlockListenerOff(jQuery(evt.target));
          readyToSubmitBlock = new Event("mollie_components_ready_to_submit", {
            bubbles: true
          });
          document.documentElement.dispatchEvent(readyToSubmitBlock);
          return _context2.abrupt("return");
        case 31:
          $form.submit();
        case 32:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[11, 17]]);
  }));
  return _submitForm.apply(this, arguments);
}
function componentElementByNameFromWithin(name, container) {
  return container ? container.querySelector(".mollie-component--".concat(name)) : null;
}
function createComponentLabelElementWithin(container, _ref2) {
  var label = _ref2.label;
  container.insertAdjacentHTML('beforebegin', "<b class=\"mollie-component-label\">".concat(label, "</b>"));
}
function createComponentsErrorContainerWithin(container, _ref3) {
  var name = _ref3.name;
  container.insertAdjacentHTML('afterend', "<div role=\"alert\" id=\"".concat(name, "-errors\"></div>"));
}
function componentByName(name, mollie, settings, mollieComponentsMap) {
  var component;
  if (mollieComponentsMap.has(name)) {
    component = mollieComponentsMap.get(name);
  }
  if (!component) {
    component = mollie.createComponent(name, settings);
  }
  return component;
}
function unmountComponents(mollieComponentsMap) {
  mollieComponentsMap.forEach(function (component) {
    try {
      component.unmount();
    } catch (err) {}
  });
}
function mountComponent(mollie, componentSettings, componentAttributes, mollieComponentsMap, baseContainer) {
  var componentName = componentAttributes.name;
  var component = componentByName(componentName, mollie, componentSettings, mollieComponentsMap);
  var mollieComponentsContainer = componentsContainerFromWithin(baseContainer);
  mollieComponentsContainer.insertAdjacentHTML('beforeend', "<div id=\"".concat(componentName, "\"></div>"));
  component.mount("#".concat(componentName));
  var currentComponentElement = componentElementByNameFromWithin(componentName, baseContainer);
  if (!currentComponentElement) {
    console.warn("Component ".concat(componentName, " not found in the DOM. Probably had problem during mount."));
    return;
  }
  createComponentLabelElementWithin(currentComponentElement, componentAttributes);
  createComponentsErrorContainerWithin(currentComponentElement, componentAttributes);
  var componentError = document.querySelector('#' + componentName + '-errors');
  component.addEventListener('change', function (event) {
    if (event.error && event.touched) {
      componentError.textContent = event.error;
    } else {
      componentError.textContent = '';
    }
  });
  !mollieComponentsMap.has(componentName) && mollieComponentsMap.set(componentName, component);
}
function mountComponents(mollie, componentSettings, componentsAttributes, mollieComponentsMap, baseContainer) {
  componentsAttributes.forEach(function (componentAttributes) {
    try {
      mountComponent(mollie, componentSettings, componentAttributes, mollieComponentsMap, baseContainer);
    } catch (err) {}
  });
}

/* -------------------------------------------------------------------
   Init
   ---------------------------------------------------------------- */

/**
 * Unmount and Mount the components if them already exists, create them if it's the first time
 * the components are created.
 */
function initializeComponents(jQuery, mollie, _ref4, mollieComponentsMap) {
  var options = _ref4.options,
    merchantProfileId = _ref4.merchantProfileId,
    componentsSettings = _ref4.componentsSettings,
    componentsAttributes = _ref4.componentsAttributes,
    enabledGateways = _ref4.enabledGateways,
    messages = _ref4.messages;
  /*
   * WooCommerce update the DOM when something on checkout page happen.
   * Mollie does not allow to keep a copy of the mounted components.
   *
   * We have to mount every time the components but we cannot recreate them.
   */
  unmountComponents(mollieComponentsMap);
  enabledGateways.forEach(function (gateway) {
    var gatewayContainer = containerForGateway(gateway, document);
    var mollieComponentsContainer = componentsContainerFromWithin(gatewayContainer);
    var form = closestFormForElement(gatewayContainer);
    var $form = jQuery(form);
    if (!gatewayContainer) {
      console.warn("Cannot initialize Mollie Components for gateway ".concat(gateway, "."));
      return;
    }
    if (!form) {
      console.warn('Cannot initialize Mollie Components, no form found.');
      return;
    }

    // Remove old listener before add new ones or form will not be submitted
    turnMollieComponentsSubmissionOff($form);

    /*
     * Clean container for mollie components because we do not know in which context we may need
     * to create components.
     */
    if (!mollieComponentsContainer) {
      return;
    }
    cleanContainer(mollieComponentsContainer);
    createTokenFieldWithin(mollieComponentsContainer);
    mountComponents(mollie, componentsSettings[gateway], componentsAttributes, mollieComponentsMap, gatewayContainer);
    $form.on('checkout_place_order', returnFalse);
    $form.on('submit', null, {
      jQuery: jQuery,
      mollie: mollie,
      gateway: gateway,
      gatewayContainer: gatewayContainer,
      messages: messages
    }, submitForm);
    //waiting for the blocks to load, this should receive an event to look for the button instead
    setTimeout(function () {
      submitButton = jQuery(".wc-block-components-checkout-place-order-button");
      jQuery(submitButton).click({
        jQuery: jQuery,
        mollie: mollie,
        gateway: gateway,
        gatewayContainer: gatewayContainer,
        messages: messages
      }, submitForm);
    }, 500);
  });
}
(function (_ref5) {
  var _ = _ref5._,
    Mollie = _ref5.Mollie,
    mollieComponentsSettings = _ref5.mollieComponentsSettings,
    jQuery = _ref5.jQuery;
  if (_.isEmpty(mollieComponentsSettings) || !_.isFunction(Mollie)) {
    return;
  }
  try {
    var checkInit = function checkInit() {
      return function () {
        var copySettings = JSON.parse(JSON.stringify(mollieComponentsSettings));
        mollieComponentsSettings.enabledGateways.forEach(function (gateway, index) {
          var gatewayContainer = containerForGateway(gateway, document);
          if (!gatewayContainer) {
            copySettings.enabledGateways.splice(index, 1);
            var $form = jQuery('form[name="checkout"]');
            $form.on('checkout_place_order', returnTrue);
          }
        });
        if (_.isEmpty(copySettings.enabledGateways)) {
          return;
        }
        initializeComponents(jQuery, mollie, copySettings, mollieComponentsMap);
      };
    };
    var eventName = 'updated_checkout';
    var mollieComponentsMap = new Map();
    var $document = jQuery(document);
    var merchantProfileId = mollieComponentsSettings.merchantProfileId,
      options = mollieComponentsSettings.options,
      isCheckoutPayPage = mollieComponentsSettings.isCheckoutPayPage;
    var mollie = new Mollie(merchantProfileId, options);
    if (isCheckoutPayPage) {
      eventName = 'payment_method_selected';
      $document.on(eventName, function () {
        return initializeComponents(jQuery, mollie, mollieComponentsSettings, mollieComponentsMap);
      });
      return;
    }
    document.addEventListener("mollie_creditcard_component_selected", function (event) {
      setTimeout(function () {
        initializeComponents(jQuery, mollie, mollieComponentsSettings, mollieComponentsMap);
      }, 500);
    });
    $document.on(eventName, checkInit());
    $document.on('update_checkout', checkInit());
  } catch (err) {}
})(window);
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,