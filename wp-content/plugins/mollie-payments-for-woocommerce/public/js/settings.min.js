/******/ (() => { // webpackBootstrap
/*!**********************************!*\
  !*** ./resources/js/settings.js ***!
  \**********************************/
(function (_ref) {
  var _ = _ref._,
    mollieSettingsData = _ref.mollieSettingsData,
    jQuery = _ref.jQuery;
  var _mollieSettingsData$c = mollieSettingsData.current_section,
    current_section = _mollieSettingsData$c === void 0 ? false : _mollieSettingsData$c;
  jQuery(function ($) {
    if (_.isEmpty(mollieSettingsData)) {
      return;
    }
    var gatewayName = current_section;
    if (!gatewayName) {
      return;
    }
    var fixedField = $('#' + gatewayName + '_fixed_fee').closest('tr');
    var percentField = $('#' + gatewayName + '_percentage').closest('tr');
    var limitField = $('#' + gatewayName + '_surcharge_limit').closest('tr');
    var maxField = $('#' + gatewayName + '_maximum_limit').closest('tr');
    $('#' + gatewayName + '_payment_surcharge').change(function () {
      switch ($(this).val()) {
        case 'no_fee':
          fixedField.hide();
          percentField.hide();
          limitField.hide();
          maxField.hide();
          break;
        case 'fixed_fee':
          fixedField.show();
          maxField.show();
          percentField.hide();
          limitField.hide();
          break;
        case 'percentage':
          fixedField.hide();
          maxField.show();
          percentField.show();
          limitField.show();
          break;
        case 'fixed_fee_percentage':
        default:
          fixedField.show();
          percentField.show();
          limitField.show();
          maxField.show();
      }
    }).change();
  });
})(window);
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dGluZ3MubWluLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxDQUNJLFVBQUFBLElBQUEsRUFDQTtFQUFBLElBRFdDLENBQUMsR0FBQUQsSUFBQSxDQUFEQyxDQUFDO0lBQUVDLGtCQUFrQixHQUFBRixJQUFBLENBQWxCRSxrQkFBa0I7SUFBRUMsTUFBTSxHQUFBSCxJQUFBLENBQU5HLE1BQU07RUFFcEMsSUFBQUMscUJBQUEsR0FBa0NGLGtCQUFrQixDQUE3Q0csZUFBZTtJQUFmQSxlQUFlLEdBQUFELHFCQUFBLGNBQUcsS0FBSyxHQUFBQSxxQkFBQTtFQUM5QkQsTUFBTSxDQUFDLFVBQVNHLENBQUMsRUFBRTtJQUVmLElBQUdMLENBQUMsQ0FBQ00sT0FBTyxDQUFDTCxrQkFBa0IsQ0FBQyxFQUFDO01BQzdCO0lBQ0o7SUFDQSxJQUFNTSxXQUFXLEdBQUdILGVBQWU7SUFDbkMsSUFBRyxDQUFDRyxXQUFXLEVBQUM7TUFDWjtJQUNKO0lBQ0EsSUFBSUMsVUFBVSxHQUFHSCxDQUFDLENBQUMsR0FBRyxHQUFDRSxXQUFXLEdBQUMsWUFBWSxDQUFDLENBQUNFLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFDOUQsSUFBSUMsWUFBWSxHQUFHTCxDQUFDLENBQUMsR0FBRyxHQUFDRSxXQUFXLEdBQUMsYUFBYSxDQUFDLENBQUNFLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFDakUsSUFBSUUsVUFBVSxHQUFHTixDQUFDLENBQUMsR0FBRyxHQUFDRSxXQUFXLEdBQUMsa0JBQWtCLENBQUMsQ0FBQ0UsT0FBTyxDQUFDLElBQUksQ0FBQztJQUNwRSxJQUFJRyxRQUFRLEdBQUdQLENBQUMsQ0FBQyxHQUFHLEdBQUNFLFdBQVcsR0FBQyxnQkFBZ0IsQ0FBQyxDQUFDRSxPQUFPLENBQUMsSUFBSSxDQUFDO0lBRWhFSixDQUFDLENBQUMsR0FBRyxHQUFDRSxXQUFXLEdBQUMsb0JBQW9CLENBQUMsQ0FBQ00sTUFBTSxDQUFDLFlBQVc7TUFDdEQsUUFBUVIsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDUyxHQUFHLENBQUMsQ0FBQztRQUNqQixLQUFLLFFBQVE7VUFDVE4sVUFBVSxDQUFDTyxJQUFJLENBQUMsQ0FBQztVQUNqQkwsWUFBWSxDQUFDSyxJQUFJLENBQUMsQ0FBQztVQUNuQkosVUFBVSxDQUFDSSxJQUFJLENBQUMsQ0FBQztVQUNqQkgsUUFBUSxDQUFDRyxJQUFJLENBQUMsQ0FBQztVQUNmO1FBQ0osS0FBSyxXQUFXO1VBQ1pQLFVBQVUsQ0FBQ1EsSUFBSSxDQUFDLENBQUM7VUFDakJKLFFBQVEsQ0FBQ0ksSUFBSSxDQUFDLENBQUM7VUFDZk4sWUFBWSxDQUFDSyxJQUFJLENBQUMsQ0FBQztVQUNuQkosVUFBVSxDQUFDSSxJQUFJLENBQUMsQ0FBQztVQUNqQjtRQUNKLEtBQUssWUFBWTtVQUNiUCxVQUFVLENBQUNPLElBQUksQ0FBQyxDQUFDO1VBQ2pCSCxRQUFRLENBQUNJLElBQUksQ0FBQyxDQUFDO1VBQ2ZOLFlBQVksQ0FBQ00sSUFBSSxDQUFDLENBQUM7VUFDbkJMLFVBQVUsQ0FBQ0ssSUFBSSxDQUFDLENBQUM7VUFDakI7UUFDSixLQUFLLHNCQUFzQjtRQUMzQjtVQUNJUixVQUFVLENBQUNRLElBQUksQ0FBQyxDQUFDO1VBQ2pCTixZQUFZLENBQUNNLElBQUksQ0FBQyxDQUFDO1VBQ25CTCxVQUFVLENBQUNLLElBQUksQ0FBQyxDQUFDO1VBQ2pCSixRQUFRLENBQUNJLElBQUksQ0FBQyxDQUFDO01BQ3ZCO0lBQ0osQ0FBQyxDQUFDLENBQUNILE1BQU0sQ0FBQyxDQUFDO0VBQ2YsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxFQUdESSxNQUNKLENBQUMsQyIsInNvdXJjZXMiOlsid2VicGFjazovL21vbGxpZS1wYXltZW50cy1mb3Itd29vY29tbWVyY2UvLi9yZXNvdXJjZXMvanMvc2V0dGluZ3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiKFxuICAgIGZ1bmN0aW9uICh7XywgbW9sbGllU2V0dGluZ3NEYXRhLCBqUXVlcnkgfSlcbiAgICB7XG4gICAgICAgIGNvbnN0IHtjdXJyZW50X3NlY3Rpb24gPSBmYWxzZX0gPSBtb2xsaWVTZXR0aW5nc0RhdGFcbiAgICAgICAgalF1ZXJ5KGZ1bmN0aW9uKCQpIHtcblxuICAgICAgICAgICAgaWYoXy5pc0VtcHR5KG1vbGxpZVNldHRpbmdzRGF0YSkpe1xuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZ2F0ZXdheU5hbWUgPSBjdXJyZW50X3NlY3Rpb25cbiAgICAgICAgICAgIGlmKCFnYXRld2F5TmFtZSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZml4ZWRGaWVsZCA9ICQoJyMnK2dhdGV3YXlOYW1lKydfZml4ZWRfZmVlJykuY2xvc2VzdCgndHInKVxuICAgICAgICAgICAgbGV0IHBlcmNlbnRGaWVsZCA9ICQoJyMnK2dhdGV3YXlOYW1lKydfcGVyY2VudGFnZScpLmNsb3Nlc3QoJ3RyJylcbiAgICAgICAgICAgIGxldCBsaW1pdEZpZWxkID0gJCgnIycrZ2F0ZXdheU5hbWUrJ19zdXJjaGFyZ2VfbGltaXQnKS5jbG9zZXN0KCd0cicpXG4gICAgICAgICAgICBsZXQgbWF4RmllbGQgPSAkKCcjJytnYXRld2F5TmFtZSsnX21heGltdW1fbGltaXQnKS5jbG9zZXN0KCd0cicpXG5cbiAgICAgICAgICAgICQoJyMnK2dhdGV3YXlOYW1lKydfcGF5bWVudF9zdXJjaGFyZ2UnKS5jaGFuZ2UoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICgkKHRoaXMpLnZhbCgpKXtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbm9fZmVlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpeGVkRmllbGQuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICBwZXJjZW50RmllbGQuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW1pdEZpZWxkLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4RmllbGQuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdmaXhlZF9mZWUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgZml4ZWRGaWVsZC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heEZpZWxkLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAgICAgcGVyY2VudEZpZWxkLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgbGltaXRGaWVsZC5oaWRlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3BlcmNlbnRhZ2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgZml4ZWRGaWVsZC5oaWRlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heEZpZWxkLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAgICAgcGVyY2VudEZpZWxkLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAgICAgbGltaXRGaWVsZC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ZpeGVkX2ZlZV9wZXJjZW50YWdlJzpcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpeGVkRmllbGQuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgICAgICBwZXJjZW50RmllbGQuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW1pdEZpZWxkLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4RmllbGQuc2hvdygpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkuY2hhbmdlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbilcbihcbiAgICB3aW5kb3dcbilcbiJdLCJuYW1lcyI6WyJfcmVmIiwiXyIsIm1vbGxpZVNldHRpbmdzRGF0YSIsImpRdWVyeSIsIl9tb2xsaWVTZXR0aW5nc0RhdGEkYyIsImN1cnJlbnRfc2VjdGlvbiIsIiQiLCJpc0VtcHR5IiwiZ2F0ZXdheU5hbWUiLCJmaXhlZEZpZWxkIiwiY2xvc2VzdCIsInBlcmNlbnRGaWVsZCIsImxpbWl0RmllbGQiLCJtYXhGaWVsZCIsImNoYW5nZSIsInZhbCIsImhpZGUiLCJzaG93Iiwid2luZG93Il0sInNvdXJjZVJvb3QiOiIifQ==